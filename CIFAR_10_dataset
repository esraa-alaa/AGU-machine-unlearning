import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms

# Define a simple Convolutional Neural Network for CIFAR-10
class SimpleCNN(nn.Module):
    def __init__(self):
        super(SimpleCNN, self).__init__()
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1)
        self.fc1 = nn.Linear(64 * 8 * 8, 128)
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = nn.MaxPool2d(2, 2)(x)  # Downsample
        x = torch.relu(self.conv2(x))
        x = nn.MaxPool2d(2, 2)(x)  # Downsample
        x = x.view(-1, 64 * 8 * 8)  # Flatten
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# AGU: Adaptive Gradient Unlearning Function
def adaptive_gradient_unlearning(model, dataset_to_forget, optimizer, criterion, eta=0.01, delta=1e-4, max_iters=100):
    model.train()
    sensitivity_scores = {name: torch.zeros_like(param) for name, param in model.named_parameters()}

    # Step 1: Compute sensitivity scores
    for data, target in dataset_to_forget:
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, target)
        loss.backward()
        for name, param in model.named_parameters():
            if param.grad is not None:
                sensitivity_scores[name] += param.grad ** 2

    # Step 2: Normalize sensitivity scores
    max_score = max(score.max() for score in sensitivity_scores.values())
    for name in sensitivity_scores:
        sensitivity_scores[name] /= max_score

    # Step 3: Adaptive updates
    for _ in range(max_iters):
        converged = True
        for data, target in dataset_to_forget:
            data, target = data.to(device), target.to(device)
            optimizer.zero_grad()
            output = model(data)
            loss = criterion(output, target)
            loss.backward()
            for name, param in model.named_parameters():
                if param.grad is not None:
                    update = eta * sensitivity_scores[name] * param.grad
                    param.data -= update
                    if torch.abs(update).max() > delta:
                        converged = False
        if converged:
            break

# CIFAR-10 Data Preparation
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))
])

train_dataset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)
test_dataset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)

# DataLoader for CIFAR-10
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = torch.utils.data.DataLoader(test_dataset, batch_size=64, shuffle=False)

# Define device, model, criterion, and optimizer
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = SimpleCNN().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)

# Train the model
def train(model, train_loader, optimizer, criterion, epochs=10):
    model.train()
    for epoch in range(epochs):
        for data, target in train_loader:
            data, target = data.to(device), target.to(device)
            optimizer.zero_grad()
            output = model(data)
            loss = criterion(output, target)
            loss.backward()
            optimizer.step()
        print(f"Epoch {epoch + 1}/{epochs} completed.")

# Test the model
def test(model, test_loader):
    model.eval()
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            pred = output.argmax(dim=1, keepdim=True)
            correct += pred.eq(target.view_as(pred)).sum().item()
    print(f"Accuracy: {100. * correct / len(test_loader.dataset):.2f}%")

# Train and Test before unlearning
train(model, train_loader, optimizer, criterion, epochs=10)
print("Before Unlearning:")
test(model, test_loader)

# Create a dataset to unlearn (e.g., samples from class '3' - Cats)
forget_indices = [i for i, (data, target) in enumerate(train_dataset) if target == 3]
forget_dataset = torch.utils.data.Subset(train_dataset, forget_indices)
forget_loader = torch.utils.data.DataLoader(forget_dataset, batch_size=64, shuffle=True)

# Apply AGU
adaptive_gradient_unlearning(model, forget_loader, optimizer, criterion)

# Test after unlearning
print("After Unlearning:")
test(model, test_loader)
